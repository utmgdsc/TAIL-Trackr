# -*- coding: utf-8 -*-
"""Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nIlbSvZ9r2mOIP1iYGQ859T3rYSfFlu-
"""

import torch
import torchvision.models as models
import torch.nn as nn
import requests
from PIL import Image
from io import BytesIO
import torchvision.transforms as transforms

vgg19 = models.vgg19(pretrained=False)
vgg19.classifier[6] = nn.Linear(4096, 2)

model_state_path = 'model.pth'
state_dict = torch.load(model_state_path, map_location=torch.device('cpu'))

vgg19.load_state_dict(state_dict)

vgg19.eval()

def preprocess_image(image_url):
    response = requests.get(image_url)
    img = Image.open(BytesIO(response.content)).convert('RGB')
    preprocess = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(256),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])
    img = preprocess(img)
    return img.unsqueeze(0)

with torch.no_grad():
    outputs = vgg19(preprocess_image("https://www.barrie.ca/sites/default/files/styles/16_9/public/2023-05/Bird-Friendly-City.jpg?itok=g7kLFo8Q"))
    probabilities = torch.nn.functional.softmax(outputs[0], dim=0)
    predicted_class = torch.argmax(probabilities).item()

# Perform further operations based on the predicted class or probabilities
# For example, print the predicted class index and its probability
print(f"Predicted Class Index: {'dog' if predicted_class else 'cat'}")
print(f"Probability: {probabilities[predicted_class].item()}")